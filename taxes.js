const args = globalThis.Deno?.args || globalThis.process?.argv?.slice(2)

// pairs of amount and matching irs taxe percentage
const IRS = [
  [     710, [0.000, 0.000, 0.000, 0.000, 0.000, 0.000]],
  [     720, [0.018, 0.002, 0.000, 0.000, 0.000, 0.000]],
  [     740, [0.045, 0.006, 0.000, 0.000, 0.000, 0.000]],
  [     754, [0.063, 0.008, 0.000, 0.000, 0.000, 0.000]],
  [     822, [0.079, 0.045, 0.010, 0.000, 0.000, 0.000]],
  [     931, [0.101, 0.067, 0.035, 0.000, 0.000, 0.000]],
  [   1_015, [0.113, 0.079, 0.057, 0.014, 0.000, 0.000]],
  [   1_075, [0.121, 0.088, 0.065, 0.033, 0.000, 0.000]],
  [   1_154, [0.131, 0.107, 0.083, 0.051, 0.027, 0.002]],
  [   1_237, [0.141, 0.118, 0.093, 0.061, 0.036, 0.012]],
  [   1_333, [0.152, 0.128, 0.105, 0.070, 0.046, 0.022]],
  [   1_437, [0.162, 0.138, 0.114, 0.080, 0.065, 0.040]],
  [   1_577, [0.172, 0.148, 0.123, 0.100, 0.075, 0.050]],
  [   1_727, [0.186, 0.163, 0.148, 0.114, 0.089, 0.065]],
  [   1_887, [0.199, 0.182, 0.173, 0.145, 0.125, 0.117]],
  [   1_995, [0.209, 0.193, 0.182, 0.155, 0.145, 0.125]],
  [   2_109, [0.219, 0.202, 0.192, 0.164, 0.155, 0.135]],
  [   2_238, [0.228, 0.213, 0.203, 0.175, 0.165, 0.145]],
  [   2_389, [0.238, 0.222, 0.213, 0.185, 0.176, 0.155]],
  [   2_558, [0.248, 0.242, 0.222, 0.204, 0.185, 0.176]],
  [   2_792, [0.258, 0.251, 0.233, 0.214, 0.194, 0.185]],
  [   3_132, [0.270, 0.264, 0.245, 0.225, 0.206, 0.196]],
  [   3_566, [0.286, 0.283, 0.268, 0.252, 0.246, 0.230]],
  [   4_156, [0.297, 0.295, 0.277, 0.262, 0.256, 0.250]],
  [   4_692, [0.314, 0.310, 0.294, 0.276, 0.270, 0.265]],
  [   5_241, [0.323, 0.318, 0.313, 0.289, 0.280, 0.274]],
  [   5_933, [0.333, 0.328, 0.322, 0.298, 0.292, 0.284]],
  [   6_788, [0.353, 0.349, 0.341, 0.322, 0.318, 0.315]],
  [   8_011, [0.363, 0.359, 0.355, 0.342, 0.328, 0.324]],
  [   9_647, [0.382, 0.378, 0.374, 0.362, 0.358, 0.344]],
  [  11_384, [0.392, 0.388, 0.384, 0.375, 0.367, 0.354]],
  [  19_024, [0.402, 0.398, 0.394, 0.385, 0.381, 0.364]],
  [  20_403, [0.412, 0.408, 0.404, 0.395, 0.391, 0.373]],
  [  22_954, [0.419, 0.417, 0.414, 0.405, 0.401, 0.385]],
  [  25_504, [0.429, 0.427, 0.423, 0.414, 0.411, 0.397]],
  // [Infinity, [0.438, 0.436, 0.433, 0.424, 0.420, 0.407]],
]

const getIRS = (amount, childCount = 0) => {
  for (const [max, rates] of IRS) {
    if (max < amount) continue
    return rates[Math.min(childCount, 5)]
  }
}

// PT salaries have 14 month, so we need to increase the amount
const duoDecimo = amount => (amount * 2) / 12
const P = (a, b) => (a - b) / a

const IRS_COMPANY = 0.2375
const SOCIAL_SECURITY = 0.11

// PT impose Subs. de alimentação (parte não tributada) 
const FOOD = 7.63
const DAYS = 22
let lPrev = 0, cPrev = 0
for (const [max] of IRS) {
  const BASE = max || Number(args[0]) || 1015
  const INSURANCE = 42
  const irs = getIRS(BASE)
  const food = FOOD * DAYS
  const liquid = (BASE + food) - (irs * BASE)
  const socialCompany = IRS_COMPANY * BASE
  const cost = socialCompany + food + INSURANCE + BASE

  const F = n => n.toFixed(2)
  console.log(
    `\nemploye IRS ${F(irs * 100)}% - company IRS ${F(IRS_COMPANY * 100)}%\n`,
    `Liquid ${F(liquid)} - cost ${F(cost)} (${F(P(cost, liquid) * 100)}%)`,
  )
  const lMore = liquid - lPrev
  const cMore = cost - cPrev
  lPrev ?
    console.log(
      `        ${F(lMore)} - ${F(cMore)} (${F(P(cMore, lMore) * 100)}%)\n`
    ) : (
      lPrev = liquid,
      cPrev = cost
    )
}
